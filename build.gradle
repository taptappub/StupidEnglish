// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {
        compileSdkVersion = 33
        minSdkVersion = 24
        targetSdkVersion = 33
        buildToolsVersion = "30.0.3"

        reaction_version = "1.0.4"
        appcompat_version = "1.5.1"
        core_ktx_version = "1.9.0"
        coroutines_version = "1.6.4"
        compose_ui_version = "1.3.3"
        material_version = "1.7.0"
        activity_compose_version = "1.6.1"
    }

    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.0.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.0"
        classpath "com.google.dagger:hilt-android-gradle-plugin:2.42"
        classpath 'com.google.gms:google-services:4.3.14'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.2'
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.21.0"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

apply plugin: "io.gitlab.arturbosch.detekt"

ext {
    kotlin_compilet_extension_version = "1.2.0"
}

detekt {
    buildUponDefaultConfig = true // preconfigure defaults
    allRules = false // activate all available (even unstable) rules.
    config = files("$projectDir/config/detekt.yml") // point to your custom config defining rules to run, overwriting default behavior
    //baseline = file("$projectDir/config/baseline.xml") // a way of suppressing issues before introducing detekt
}

//tasks.withType(Detekt).configureEach {
//    reports {
//        html.required.set(true) // observe findings in your browser with structure and code snippets
//        xml.required.set(true) // checkstyle like format mainly for integrations like Jenkins
//        txt.required.set(true) // similar to the console output, contains issue signature to manually edit baseline files
//        sarif.required.set(true) // standardized SARIF format (https://sarifweb.azurewebsites.net/) to support integrations with Github Code Scanning
//        md.required.set(true) // simple Markdown format
//    }
//}
//
//// Groovy DSL
//tasks.withType(Detekt).configureEach {
//    jvmTarget = "1.8"
//}
//tasks.withType(DetektCreateBaselineTask).configureEach {
//    jvmTarget = "1.8"
//}

task clean(type: Delete) {
    delete rootProject.buildDir
}